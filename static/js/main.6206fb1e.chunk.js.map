{"version":3,"sources":["component/pokedex.js","component/Pokemon.js","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","pokedexContainer","paddingTop","paddingRight","paddingLeft","cardMediaStyle","height","width","margin","backgroundSize","cardContentStyle","textAlign","searchIconWrapper","display","alignItems","justifyContent","input","color","backgroundColor","Pokedex","props","useEffect","a","fetch","respone","json","responeData","newPokemonData","results","forEach","pokemon","index","id","name","sprite","setPokemonData","getData","useState","pokemonData","filterString","setfilter","classes","history","useHistory","AppBar","searchBar","position","Toolbar","Grid","container","item","Typography","Box","className","Search","TextField","label","variant","size","onChange","e","target","value","searchData","spacing","Object","keys","map","pokemonId","includes","data","xs","sm","lg","Card","CardActionArea","onClick","push","detail","CardMedia","image","CardContent","CircularProgress","usestyles","cardStyle","buttonCss","marginTop","Pokemon","setPokemon","useParams","species","weight","types","sprites","src","alt","type","toString","Button","rederPokemonJSX","style","App","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","createBrowserHistory","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6206fb1e.chunk.js","sourcesContent":["import React,{useState,useEffect} from 'react';\r\nimport { AppBar ,\r\n         Toolbar ,\r\n         Grid, \r\n         makeStyles,\r\n         CardContent,\r\n         CardMedia,\r\n         Card,\r\n         CircularProgress,\r\n         Typography,\r\n         TextField,\r\n         Box,\r\n         CardActionArea} from '@material-ui/core'; \r\nimport { Search } from '@material-ui/icons';\r\nimport { BrowserRouter, Link ,NavLink,Route,useParams,useHistory } from \"react-router-dom\";\r\n\r\n\r\nconst useStyles=makeStyles((theme)=>({\r\n    pokedexContainer:{\r\n        paddingTop:'20px',\r\n        paddingRight:'50px',\r\n        paddingLeft:'50px',\r\n    },\r\n    cardMediaStyle:{\r\n        height:130,\r\n        width:'100%',\r\n        paddingTop:'36%',\r\n        margin:'auto',\r\n        backgroundSize:'cover'\r\n    },\r\n    cardContentStyle:{ \r\n        textAlign:'center'\r\n    },\r\n    searchIconWrapper:{ \r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',  \r\n    },\r\n    input:{ \r\n        color:'white',backgroundColor:'white' \r\n    }\r\n})\r\n) \r\n\r\nfunction Pokedex(props) {\r\n    \r\n    useEffect(() => \r\n    { \r\n        async function getData(){\r\n            const respone=await fetch('https://pokeapi.co/api/v2/pokemon?limit=200')\r\n            const responeData= await respone.json()\r\n            // const {dataResponse}=json.data\r\n            \r\n            const newPokemonData={}\r\n             responeData.results.forEach((pokemon,index)=>\r\n                   { newPokemonData[index+1]={id:index+1,\r\n                    name: pokemon.name,\r\n                    sprite: `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${\r\n                      index + 1\r\n                    }.png`, }}\r\n            )\r\n            // console.log(newPokemonData)\r\n            setPokemonData(newPokemonData)\r\n        }\r\n        getData()\r\n    }, []) \r\n\r\n    const[pokemonData,setPokemonData]=useState([])\r\n    const[filterString,setfilter]=useState('')\r\n    const classes=useStyles(); \r\n    const history=useHistory(); \r\n\r\n    // console.log ('history',history)\r\n     \r\n    const getPokemonCard=(data )=>{\r\n        // console.log('dataGet',data )\r\n        return(\r\n            <Grid item xs={12} sm={4} lg={2} key={data.id}\r\n                  \r\n            >\r\n                <Card>\r\n                    <CardActionArea\r\n                        onClick={()=>history.push(`/Pokadex/${data.id}`,{detail:data.id})}\r\n                    >\r\n                        <CardMedia \r\n                            className={classes.cardMediaStyle}\r\n                            image={data.sprite} \r\n                        />\r\n                    </CardActionArea>\r\n                    <CardContent className={classes.cardContentStyle}>\r\n                        <Typography variant='h5'>{data.id}: {data.name}</Typography>\r\n                    </CardContent>\r\n                </Card>\r\n            </Grid>\r\n        )\r\n    }\r\n\r\n     \r\n\r\n    function searchData(e){\r\n         setfilter(e.target.value)\r\n    }\r\n\r\n    return (\r\n        <> \r\n            <AppBar searchBar position='static'>\r\n                <Toolbar > \r\n                    <Grid container justifyContent='space-between' alignItems='center'>\r\n                    <Grid item>\r\n                        <Typography>POKADEX</Typography>\r\n                    </Grid>\r\n\r\n                    <Grid item>\r\n                        <Box className={classes.searchIconWrapper}>\r\n                        <Search/> \r\n                        <TextField \r\n                            className={classes.input}\r\n                            id=\"outlined-basic\" \r\n                            label=\"Search...\" \r\n                            variant=\"outlined\" \r\n                            size='small'\r\n                            color='white'\r\n                            onChange={(e)=>searchData(e)}\r\n                            />\r\n                        </Box> \r\n                    </Grid>\r\n                    </Grid>\r\n                </Toolbar> \r\n            </AppBar>\r\n            {pokemonData ? (\r\n                        <Grid container spacing={2} className={classes.pokedexContainer}>\r\n                            {\r\n                            Object.keys(pokemonData).map((pokemonId)=>( \r\n                                pokemonData[pokemonId].name.includes(filterString) &&\r\n                                getPokemonCard(pokemonData[pokemonId])\r\n                               )) }\r\n                        </Grid> \r\n                        )  :<CircularProgress/> \r\n            }\r\n\r\n        </>\r\n        \r\n    );\r\n}\r\n\r\nexport default Pokedex;","import { Paper,CardHeader, Typography,Card, CardMedia, CardContent, makeStyles, Button, CircularProgress } from '@material-ui/core';\r\nimport React,{useState,useEffect}  from 'react';\r\nimport { useParams,useHistory } from 'react-router-dom';\r\nimport PokemonData from '../pokeData/mock';\r\n\r\nconst usestyles=makeStyles({\r\n    cardStyle:{\r\n\r\n    },\r\n    cardMediaStyle:{\r\n        width:130,\r\n        height:130\r\n    }\r\n    ,\r\n    buttonCss:{\r\n        marginTop:20\r\n    }\r\n})\r\n\r\n\r\n\r\nfunction Pokemon(props) {\r\n\r\n    const[pokemon,setPokemon] = useState('')\r\n    const classes=usestyles()  \r\n    const{pokemonId}=useParams() \r\n    const history=useHistory()\r\n\r\n\r\n    useEffect(() => { \r\n        async function getData(){\r\n            const respone=await fetch(`https://pokeapi.co/api/v2/pokemon/${pokemonId}`)\r\n            const responeData= await respone.json()\r\n            //  console.log(responeData)\r\n\r\n            setPokemon(responeData)\r\n        }\r\n        getData()\r\n    }, [])\r\n \r\n    const rederPokemonJSX=()=>{\r\n        \r\n        const{name,id,species,height,weight,types}=pokemon\r\n        const sprites =`https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${\r\n            id\r\n          }.png`\r\n   \r\n        return(\r\n            <  >\r\n\r\n                <Typography\r\n                    variant='h2'  \r\n                >{ `${id}. ${name}`} </Typography> \r\n                         \r\n                <img \r\n                    src={sprites}\r\n                    className={classes.cardMediaStyle}\r\n                    alt='hinh'\r\n                />\r\n \r\n                <Typography variant='h5'>\r\n                    Pokemon Info\r\n                </Typography>\r\n\r\n                <Typography variant='h6'>\r\n                    Species: {species.name}\r\n                </Typography>\r\n\r\n                <Typography variant='h6'>\r\n                    Height: {height}\r\n                </Typography>\r\n\r\n                <Typography variant='h6'>\r\n                    Weight: {weight}\r\n                </Typography>\r\n\r\n                \r\n                <Typography variant='h6'>\r\n                    Types:  {types.map((type)=>( \r\n                            type.type.name\r\n                            )).toString(',')}\r\n                </Typography> \r\n \r\n                 <Button \r\n                    className={classes.buttonCss}\r\n                    variant='contained' \r\n                    size='large'\r\n                    color='primary'\r\n                    onClick={()=>{history.push('/Pokadex')}}\r\n                >\r\n                 Back To Home\r\n                 </Button>       \r\n            </>\r\n        )\r\n\r\n    }\r\n    return (\r\n        <>\r\n            {pokemon ? rederPokemonJSX() : \r\n                <div style={{display: 'flex' , justifyContent: 'center', width: '100%'}}><CircularProgress/></div>\r\n            }\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Pokemon;","// import { Typography } from '@mui/material'; \nimport { Button } from '@material-ui/core';\nimport { BrowserRouter as Router,Route,Link, NavLink  } from 'react-router-dom';\nimport './App.css';  \nimport Pokedex from './component/pokedex';\nimport Pokemon  from './component/Pokemon';\n\n\nfunction App(props) {\n   \n\n  return (\n    <Router>   \n        <Route \n          exact\n          path='/Pokadex/:pokemonId'  \n        > \n        <Pokemon/>\n        </Route> \n\n        <Route \n          exact\n          path='/Pokadex' \n        >\n          <Pokedex/>\n        </Route> \n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Router} from 'react-router-dom';\nimport {createBrowserHistory} from 'history';\n\nconst history=createBrowserHistory()\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router history={history}>\n    <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}